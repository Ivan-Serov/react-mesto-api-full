{"ast":null,"code":"import _objectSpread from \"/home/ivan/react-mesto-api-full/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/ivan/react-mesto-api-full/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ivan/react-mesto-api-full/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { baseToken } from \"./constants\";\n\nvar Api = /*#__PURE__*/function () {\n  function Api(url, headers, jwt) {\n    _classCallCheck(this, Api);\n\n    this.checkResult = function (res) {\n      if (res.ok) {\n        return res.json();\n      } else {\n        return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n      }\n    };\n\n    this._url = url;\n    this._authorizationToken = jwt;\n    this._headers = headers; //this._headers ={Authorization:this._authorizationToken, 'Content-Type': 'application/json'};\n  }\n\n  _createClass(Api, [{\n    key: \"_getAuthHeader\",\n    value: function _getAuthHeader() {\n      var jwt = localStorage.getItem('jwt');\n      return jwt ? {\n        Authorization: \"Bearer \".concat(jwt)\n      } : {};\n    }\n  }, {\n    key: \"getUserInfo\",\n    value: function getUserInfo() {\n      return fetch(this._url + '/users/me', {\n        method: 'GET',\n        headers: _objectSpread({}, this._headers, this._getAuthHeader())\n      }).then(this.checkResult);\n    }\n  }, {\n    key: \"getInitialCards\",\n    value: function getInitialCards() {\n      return fetch(this._url + '/cards', {\n        method: 'GET',\n        headers: _objectSpread({}, this._headers, this._getAuthHeader())\n      }).then(this.checkResult);\n    }\n  }, {\n    key: \"editProfile\",\n    value: function editProfile(data) {\n      return fetch(this._url + '/users/me', {\n        method: 'PATCH',\n        headers: this._headers,\n        body: JSON.stringify(data)\n      }).then(this.checkResult);\n    }\n  }, {\n    key: \"addPlace\",\n    value: function addPlace(data) {\n      return fetch(this._url + '/cards', {\n        method: 'POST',\n        headers: _objectSpread({}, this._headers, this._getAuthHeader()),\n        //this._headers,\n        body: JSON.stringify(data)\n      }).then(this.checkResult);\n    }\n  }, {\n    key: \"deletePost\",\n    value: function deletePost(cardId) {\n      return fetch(this._url + '/cards/' + cardId, {\n        method: 'DELETE',\n        headers: _objectSpread({}, this._headers, this._getAuthHeader()) //this._headers,\n\n      }).then(this.checkResult);\n    }\n  }, {\n    key: \"addLike\",\n    value: function addLike(cardId) {\n      return fetch(this._url + '/cards/likes/' + cardId, {\n        method: 'PUT',\n        headers: this._headers\n      }).then(this.checkResult);\n    }\n  }, {\n    key: \"deleteLike\",\n    value: function deleteLike(cardId) {\n      return fetch(this._url + '/cards/likes/' + cardId, {\n        method: 'DELETE',\n        headers: this._headers\n      }).then(this.checkResult);\n    }\n  }, {\n    key: \"addAvatar\",\n    value: function addAvatar(avatar) {\n      return fetch(this._url + '/users/me/avatar', {\n        method: 'PATCH',\n        headers: this._headers,\n        body: JSON.stringify(avatar)\n      }).then(this.checkResult);\n    }\n  }]);\n\n  return Api;\n}();\n/* class Api {\n  constructor({ url, headers }) {\n    this._url = url;\n    this._headers = headers;\n  }\n\n  _getAuthHeader() {\n    const jwt = localStorage.getItem('jwt');\n    return jwt ? { Authorization: `Bearer ${jwt}` } : {};\n  }\n\n\n  checkResult(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n\n  getUserInfo() {\n    return fetch(`${this._url}users/me`, {\n      method: 'GET',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  editProfile(data) {\n    return fetch(`${this._url}users/me`, {\n      method: 'PATCH',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about,\n      }),\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  getInitialCards() {\n    return fetch(`${this._url}cards`, {\n      method: 'GET',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  addPlace(data) {\n    return fetch(`${this._url}cards`, {\n      method: 'POST',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link,\n      }),\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  deletePost(cardId) {\n    return fetch(`${this._url}cards/${cardId}`, {\n      method: 'DELETE',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  addLike(id) {\n    return fetch(`${this._url}cards/${id}/likes`, {\n      method: 'PUT',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  deleteLike(id) {\n    return fetch(`${this._url}cards/${id}/likes`, {\n      method: 'DELETE',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  addAvatar(data) {\n    return fetch(`${this._url}users/me/avatar`, {\n      method: 'PATCH',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n      body: JSON.stringify({\n        avatar: data,\n      }),\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n}\n\nconst api = new Api({\n  url: 'http://localhost:3001',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport default api; */\n\n\nexport var api = new Api('http://localhost:3001', baseToken); //https://nomoreparties.co/v1/cohort-28 // d0022a9e-a6be-4d9a-ab6e-3949875c7c34","map":{"version":3,"sources":["/home/ivan/react-mesto-api-full/frontend/src/utils/Api.js"],"names":["baseToken","Api","url","headers","jwt","checkResult","res","ok","json","Promise","reject","status","_url","_authorizationToken","_headers","localStorage","getItem","Authorization","fetch","method","_getAuthHeader","then","data","body","JSON","stringify","cardId","avatar","api"],"mappings":"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","sourcesContent":["import { baseToken } from \"./constants\";\n\nclass Api {\n  constructor(url, headers, jwt) {\n    this._url = url;\n    this._authorizationToken = jwt;\n    this._headers = headers;\n    //this._headers ={Authorization:this._authorizationToken, 'Content-Type': 'application/json'};\n  }\n  _getAuthHeader() {\n    const jwt = localStorage.getItem('jwt');\n    return jwt ? { Authorization: `Bearer ${jwt}` } : {};\n  }\n  getUserInfo() {\n    return fetch(this._url +'/users/me', {\n      method: 'GET',\n      headers: {...this._headers, ...this._getAuthHeader() \n        //Authorization: `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MzA0YjYyYTA0NzFjMTdlNGYxMTczMzYiLCJpYXQiOjE2NjEyNjU4OTgsImV4cCI6MTY2MTg3MDY5OH0.-oclzIeC4662HrGxIwxFaT7VNgL80WlPbuPno8lFlkc`\n        //Authorization: this._authorizationToken \n      }})\n    .then(this.checkResult);\n  }\n  getInitialCards() {\n    return fetch(this._url +'/cards', {\n      method: 'GET',\n      headers: {...this._headers, ...this._getAuthHeader() \n        //Authorization: this._authorizationToken\n        //Authorization: `Bearer ${localStorage.getItem('jwt')}` \n      }})\n    .then(this.checkResult);\n  }\n  editProfile(data){\n    return fetch(this._url +'/users/me', {\n        method: 'PATCH',\n        headers: this._headers,\n        body: JSON.stringify(data)\n      })\n    .then(this.checkResult);\n  }\n  addPlace(data){\n    return fetch(this._url +'/cards', {\n      method: 'POST',\n      headers: {...this._headers, ...this._getAuthHeader() },//this._headers,\n      body: JSON.stringify(data)\n    })\n    .then(this.checkResult);\n  }\n  deletePost(cardId) {\n    return fetch(this._url + '/cards/' + cardId, {\n      method: 'DELETE',\n      headers:{...this._headers, ...this._getAuthHeader() }, //this._headers,\n    })\n    .then(this.checkResult);\n  }\n  addLike(cardId){\n    return fetch(this._url + '/cards/likes/' + cardId, {\n      method: 'PUT',\n      headers: this._headers,\n    })\n    .then(this.checkResult);\n  }\n  deleteLike(cardId){\n    return fetch(this._url + '/cards/likes/' + cardId, {\n      method: 'DELETE',\n      headers: this._headers,\n    })\n    .then(this.checkResult);\n  }\n  addAvatar(avatar){\n    return fetch(this._url +'/users/me/avatar', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify(avatar)\n    })\n    .then(this.checkResult);\n  }\n  checkResult = res => {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n}\n/* class Api {\n  constructor({ url, headers }) {\n    this._url = url;\n    this._headers = headers;\n  }\n\n  _getAuthHeader() {\n    const jwt = localStorage.getItem('jwt');\n    return jwt ? { Authorization: `Bearer ${jwt}` } : {};\n  }\n\n\n  checkResult(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n\n  getUserInfo() {\n    return fetch(`${this._url}users/me`, {\n      method: 'GET',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  editProfile(data) {\n    return fetch(`${this._url}users/me`, {\n      method: 'PATCH',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about,\n      }),\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  getInitialCards() {\n    return fetch(`${this._url}cards`, {\n      method: 'GET',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  addPlace(data) {\n    return fetch(`${this._url}cards`, {\n      method: 'POST',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link,\n      }),\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  deletePost(cardId) {\n    return fetch(`${this._url}cards/${cardId}`, {\n      method: 'DELETE',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  addLike(id) {\n    return fetch(`${this._url}cards/${id}/likes`, {\n      method: 'PUT',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  deleteLike(id) {\n    return fetch(`${this._url}cards/${id}/likes`, {\n      method: 'DELETE',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  addAvatar(data) {\n    return fetch(`${this._url}users/me/avatar`, {\n      method: 'PATCH',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n      body: JSON.stringify({\n        avatar: data,\n      }),\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n}\n\nconst api = new Api({\n  url: 'http://localhost:3001',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport default api; */\nexport const api = new Api('http://localhost:3001', baseToken);\n//https://nomoreparties.co/v1/cohort-28 // d0022a9e-a6be-4d9a-ab6e-3949875c7c34"]},"metadata":{},"sourceType":"module"}