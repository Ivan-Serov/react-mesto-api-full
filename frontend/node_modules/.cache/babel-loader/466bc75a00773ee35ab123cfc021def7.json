{"ast":null,"code":"import _classCallCheck from \"/home/ivan/react-mesto-api-full/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ivan/react-mesto-api-full/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { baseToken } from \"../utils/constant\";\n\nvar Api = /*#__PURE__*/function () {\n  function Api(url, token) {\n    _classCallCheck(this, Api);\n\n    this.checkResult = function (res) {\n      if (res.ok) {\n        return res.json();\n      } else {\n        return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n      }\n    };\n\n    this._url = url;\n    this._authorizationToken = token;\n    this._headers = {\n      authorization: this._authorizationToken,\n      'Content-Type': 'application/json'\n    };\n  }\n  /* _getAuthHeader() {\n    const jwt = localStorage.getItem('jwt');\n    return jwt ? { Authorization: `Bearer ${jwt}` } : {};\n  } */\n\n\n  _createClass(Api, [{\n    key: \"getUserInfo\",\n    value: function getUserInfo() {\n      return fetch(this._url + '/users/me', {\n        method: 'GET',\n        headers: {\n          authorization: \"Bearer \".concat(localStorage.getItem('jwt'))\n          /* authorization: this._authorizationToken */\n\n        }\n      }).then(this.checkResult);\n    }\n  }, {\n    key: \"getInitialCards\",\n    value: function getInitialCards() {\n      return fetch(this._url + '/cards', {\n        headers: {\n          authorization: this._authorizationToken\n        }\n      }).then(this.checkResult);\n    }\n  }, {\n    key: \"editProfile\",\n    value: function editProfile(data) {\n      return fetch(this._url + '/users/me', {\n        method: 'PATCH',\n        headers: this._headers,\n        body: JSON.stringify(data)\n      }).then(this.checkResult);\n    }\n  }, {\n    key: \"addPlace\",\n    value: function addPlace(data) {\n      return fetch(this._url + '/cards', {\n        method: 'POST',\n        headers: this._headers,\n        body: JSON.stringify(data)\n      }).then(this.checkResult);\n    }\n  }, {\n    key: \"deletePost\",\n    value: function deletePost(cardId) {\n      return fetch(this._url + '/cards/' + cardId, {\n        method: 'DELETE',\n        headers: this._headers\n      }).then(this.checkResult);\n    }\n  }, {\n    key: \"addLike\",\n    value: function addLike(cardId) {\n      return fetch(this._url + '/cards/likes/' + cardId, {\n        method: 'PUT',\n        headers: this._headers\n      }).then(this.checkResult);\n    }\n  }, {\n    key: \"deleteLike\",\n    value: function deleteLike(cardId) {\n      return fetch(this._url + '/cards/likes/' + cardId, {\n        method: 'DELETE',\n        headers: this._headers\n      }).then(this.checkResult);\n    }\n  }, {\n    key: \"addAvatar\",\n    value: function addAvatar(avatar) {\n      return fetch(this._url + '/users/me/avatar', {\n        method: 'PATCH',\n        headers: this._headers,\n        body: JSON.stringify(avatar)\n      }).then(this.checkResult);\n    }\n  }]);\n\n  return Api;\n}();\n/* class Api {\n  constructor({ url, headers }) {\n    this._url = url;\n    this._headers = headers;\n  }\n\n  _getAuthHeader() {\n    const jwt = localStorage.getItem('jwt');\n    return jwt ? { Authorization: `Bearer ${jwt}` } : {};\n  }\n\n\n  checkResult(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n\n  getUserInfo() {\n    return fetch(`${this._url}users/me`, {\n      method: 'GET',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  editProfile(data) {\n    return fetch(`${this._url}users/me`, {\n      method: 'PATCH',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about,\n      }),\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  getInitialCards() {\n    return fetch(`${this._url}cards`, {\n      method: 'GET',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  addPlace(data) {\n    return fetch(`${this._url}cards`, {\n      method: 'POST',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link,\n      }),\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  deletePost(cardId) {\n    return fetch(`${this._url}cards/${cardId}`, {\n      method: 'DELETE',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  addLike(id) {\n    return fetch(`${this._url}cards/${id}/likes`, {\n      method: 'PUT',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  deleteLike(id) {\n    return fetch(`${this._url}cards/${id}/likes`, {\n      method: 'DELETE',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  addAvatar(data) {\n    return fetch(`${this._url}users/me/avatar`, {\n      method: 'PATCH',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n      body: JSON.stringify({\n        avatar: data,\n      }),\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n}\n\nconst api = new Api({\n  url: 'http://localhost:3001',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport default api; */\n\n\nexport var api = new Api('http://localhost:3001', baseToken); //https://nomoreparties.co/v1/cohort-28 // d0022a9e-a6be-4d9a-ab6e-3949875c7c34","map":{"version":3,"sources":["/home/ivan/react-mesto-api-full/frontend/src/utils/Api.js"],"names":["baseToken","Api","url","token","checkResult","res","ok","json","Promise","reject","status","_url","_authorizationToken","_headers","authorization","fetch","method","headers","localStorage","getItem","then","data","body","JSON","stringify","cardId","avatar","api"],"mappings":"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","sourcesContent":["import {baseToken } from \"../utils/constant\";\n\nclass Api {\n  constructor(url, token) {\n    this._url = url;\n    this._authorizationToken = token;\n    this._headers ={authorization:this._authorizationToken, 'Content-Type': 'application/json'};\n  }\n  /* _getAuthHeader() {\n    const jwt = localStorage.getItem('jwt');\n    return jwt ? { Authorization: `Bearer ${jwt}` } : {};\n  } */\n  getUserInfo() {\n    return fetch(this._url +'/users/me', {\n      method: 'GET',\n      headers: {\n        authorization: `Bearer ${localStorage.getItem('jwt')}`\n        /* authorization: this._authorizationToken */\n      }})\n    .then(this.checkResult);\n  }\n  getInitialCards() {\n    return fetch(this._url +'/cards', {\n      headers: {\n        authorization: this._authorizationToken\n      }})\n    .then(this.checkResult);\n  }\n  editProfile(data){\n    return fetch(this._url +'/users/me', {\n        method: 'PATCH',\n        headers: this._headers,\n        body: JSON.stringify(data)\n      })\n    .then(this.checkResult);\n  }\n  addPlace(data){\n    return fetch(this._url +'/cards', {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify(data)\n    })\n    .then(this.checkResult);\n  }\n  deletePost(cardId) {\n    return fetch(this._url + '/cards/' + cardId, {\n      method: 'DELETE',\n      headers: this._headers,\n    })\n    .then(this.checkResult);\n  }\n  addLike(cardId){\n    return fetch(this._url + '/cards/likes/' + cardId, {\n      method: 'PUT',\n      headers: this._headers,\n    })\n    .then(this.checkResult);\n  }\n  deleteLike(cardId){\n    return fetch(this._url + '/cards/likes/' + cardId, {\n      method: 'DELETE',\n      headers: this._headers,\n    })\n    .then(this.checkResult);\n  }\n  addAvatar(avatar){\n    return fetch(this._url +'/users/me/avatar', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify(avatar)\n    })\n    .then(this.checkResult);\n  }\n  checkResult = res => {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n}\n/* class Api {\n  constructor({ url, headers }) {\n    this._url = url;\n    this._headers = headers;\n  }\n\n  _getAuthHeader() {\n    const jwt = localStorage.getItem('jwt');\n    return jwt ? { Authorization: `Bearer ${jwt}` } : {};\n  }\n\n\n  checkResult(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n\n  getUserInfo() {\n    return fetch(`${this._url}users/me`, {\n      method: 'GET',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  editProfile(data) {\n    return fetch(`${this._url}users/me`, {\n      method: 'PATCH',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about,\n      }),\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  getInitialCards() {\n    return fetch(`${this._url}cards`, {\n      method: 'GET',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  addPlace(data) {\n    return fetch(`${this._url}cards`, {\n      method: 'POST',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link,\n      }),\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  deletePost(cardId) {\n    return fetch(`${this._url}cards/${cardId}`, {\n      method: 'DELETE',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  addLike(id) {\n    return fetch(`${this._url}cards/${id}/likes`, {\n      method: 'PUT',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  deleteLike(id) {\n    return fetch(`${this._url}cards/${id}/likes`, {\n      method: 'DELETE',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n\n  addAvatar(data) {\n    return fetch(`${this._url}users/me/avatar`, {\n      method: 'PATCH',\n      headers: { ...this._headers, ...this._getAuthHeader() },\n      body: JSON.stringify({\n        avatar: data,\n      }),\n    }).then((res) => {\n      return this.checkResult(res);\n    });\n  }\n}\n\nconst api = new Api({\n  url: 'http://localhost:3001',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport default api; */\nexport const api = new Api('http://localhost:3001', baseToken);\n//https://nomoreparties.co/v1/cohort-28 // d0022a9e-a6be-4d9a-ab6e-3949875c7c34"]},"metadata":{},"sourceType":"module"}